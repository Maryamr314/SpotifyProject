services:
  # **Kafka Service**
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: broker
    ports:
      - "9092:9092"
      - "29092:29092"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_NODE_ID: "1"
      CLUSTER_ID: "MKJ3OEVBNTcwNTJENDM2QK"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093,EXTERNAL://0.0.0.0:29092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker:9092,EXTERNAL://localhost:29092"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      retries: 5
      start_period: 20s

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "_connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "_connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "_connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:9095"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java"
    depends_on:
      - kafka
      - schema-registry
    networks:
      - kafka-network

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    ports:
      - "9095:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://broker:9092"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - "8082:8080"
    environment:
      KAFKA_BROKERS: "broker:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:9095"
      KAFKA_CONNECT_URL: "http://kafka-connect:8083"
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_started
      kafka-connect:
        condition: service_started
    networks:
      - kafka-network

  eventsim:
    image: khoramism/event-generator-eventsim:1.2
    container_name: eventsim
    environment:
      BOOTSTRAP_SERVERS: "broker:9092"
      SECURITY_PROTOCOL: "PLAINTEXT"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CLIENT_DNS_LOOKUP: "use_all_dns_ips"
      SESSION_TIMEOUT_MS: "45000"
      SASL_JAAS_CONFIG: ""
      SASL_MECHANISM: ""
      KEY_SERIALIZER: "org.apache.kafka.common.serialization.ByteArraySerializer"
      VALUE_SERIALIZER: "org.apache.kafka.common.serialization.ByteArraySerializer"
      ACKS: "all"
    command: ./bin/eventsim -c configs/Guitar-config.json --continuous --from 200 --nusers 2000 -k 1
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_started
    networks:
      - kafka-network

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - "9870:9870"
      - "9000:9000"
    environment:
      - CLUSTER_NAME=hadoop-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
      - HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false
    env_file:
      - ./hadoop.env
    volumes:
      - namenode-data:/hadoop/dfs/name
    networks:
      - hadoop-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
      - HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false
    env_file:
      - ./hadoop.env
    volumes:
      - datanode-data:/hadoop/dfs/data
    networks:
      - hadoop-network
    depends_on:
      - namenode

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      # Hadoop configurations
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps
    networks:
      - spark-network
      - hadoop-network
      - kafka-network

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      # Hadoop configurations
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - ./spark/apps:/opt/bitnami/spark/apps
    depends_on:
      - spark-master
    networks:
      - spark-network
      - hadoop-network
      - kafka-network

  # Adding DBT container for transformation logic
  dbt:
    image: ghcr.io/dbt-labs/dbt-spark:1.6.0
    container_name: dbt
    volumes:
      - ./dbt:/usr/app
    environment:
      - DBT_PROFILES_DIR=/usr/app/profiles
    depends_on:
      - spark-master
    networks:
      - spark-network
      - hadoop-network

  # Adding Airflow for orchestration
  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8090:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./dbt:/opt/dbt
    depends_on:
      - postgres
    networks:
      - airflow-network
      - spark-network
      - hadoop-network
      - kafka-network

  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: airflow-scheduler
    command: scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./dbt:/opt/dbt
    depends_on:
      - postgres
    networks:
      - airflow-network

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - airflow-network

  # ClickHouse for serving Gold layer data
  clickhouse-server:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse-server
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse/config:/etc/clickhouse-server/config.d
    networks:
      - hadoop-network
      - clickhouse-network

volumes:
  kafka-data:
  namenode-data:
  datanode-data:
  postgres-data:
  clickhouse-data:

networks:
  kafka-network:
    driver: bridge
  hadoop-network:
    driver: bridge
  spark-network:
    driver: bridge
  airflow-network:
    driver: bridge
  clickhouse-network:
    driver: bridge